<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>แปลงรูปแบบวันที่ พ.ศ. / ค.ศ.</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Kanit', sans-serif;
        }
        /* Hide scrollbar but allow scrolling */
        textarea::-webkit-scrollbar { display: none; }
        textarea { -ms-overflow-style: none; scrollbar-width: none; }
        /* Animation for button clicks */
        @keyframes click-animation {
            0% { transform: scale(1); }
            50% { transform: scale(0.97); }
            100% { transform: scale(1); }
        }
        .animate-on-click {
            animation: click-animation 0.2s ease-in-out;
        }

        /* Styles for the message box */
        #messageBox {
            opacity: 0;
            pointer-events: none; /* Make it unclickable when hidden */
            transition: opacity 0.5s ease-in-out, transform 0.3s ease-out; /* Smooth transitions for opacity and slide-in */
            transform: translateX(100%); /* Start off-screen to the right */
            right: 0; /* Align to the very right edge */
            margin-right: 1rem; /* Add some margin from the right edge */
            max-width: calc(100% - 2rem); /* Max width, accounting for margins on both sides */
            width: auto; /* Allow width to adjust to content, up to max-width */
            box-sizing: border-box; /* Include padding/border in width calculation */
            z-index: 1000; /* Ensure it's above other content */
        }
        #messageBox.show {
            opacity: 1;
            pointer-events: auto;
            transform: translateX(0); /* Slide in to visible position */
        }
    </style>
</head>
<body class="bg-gradient-to-br from-gray-50 to-blue-100 min-h-screen flex items-center justify-center p-4">
    <div class="bg-white/80 backdrop-blur-sm p-6 sm:p-8 rounded-2xl shadow-2xl w-full max-w-4xl border border-gray-200/80">
        
        <!-- Header -->
        <div class="text-center mb-6">
            <h1 class="text-3xl sm:text-4xl font-bold text-gray-800">แปลงรูปแบบวันที่</h1>
            <p class="text-gray-600 mt-2">วางรายการวันที่จาก Excel หรือที่อื่น ๆ (รองรับหลายรูปแบบ)</p>
        </div>

        <!-- Format Selection -->
        <div class="mb-6 max-w-lg mx-auto">
            <div class="flex items-center gap-4">
                <label for="outputFormatSelect" class="text-gray-700 text-sm font-semibold">เลือกรูปแบบผลลัพธ์</label>
                <div class="relative flex-1">
                    <select
                        id="outputFormatSelect"
                        class="w-full p-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 appearance-none bg-white text-gray-800 pr-10"
                    >
                        <option value="dd/mm/yyyy_ce">วัน/เดือน/ปี ค.ศ. (DD/MM/YYYY) *PASADHU*</option>
                        <option value="dd/mm/yyyy_be">วัน/เดือน/ปี พ.ศ. (DD/MM/YYYY)</option>
                        <option value="yy.mm.dd_be">ปี.เดือน.วัน (พ.ศ. 2 หลัก) (YY.MM.DD)</option>
                    </select>
                    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-4 text-gray-700">
                        <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/></svg>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Conversion Area -->
        <div class="flex flex-col md:flex-row items-start md:items-center gap-4 mb-4">
            <!-- Input Column -->
            <div class="w-full md:flex-1">
                <label for="inputDates" class="block text-gray-700 text-sm font-semibold mb-2">ข้อมูลวันที่ (นำเข้า)</label>
                <textarea
                    id="inputDates"
                    rows="10"
                    placeholder="ตัวอย่าง:&#10;23.09.2558&#10;01-01-2024&#10;23 ก.ย. 66&#10;2 มกราคม 2567"
                    class="w-full p-4 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-gray-800 transition"
                ></textarea>
            </div>

            <!-- Process Button Column -->
            <div class="w-full md:w-auto flex justify-center md:self-center pt-4 md:pt-0">
                   <button
                    id="processButton"
                    class="w-[120px] h-[120px] bg-blue-600 hover:bg-blue-700 text-white font-bold py-8 px-5 rounded-xl shadow-lg transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 flex flex-col items-center justify-center space-y-2"
                >
                    <span id="processButtonText">แปลงวันที่</span>
                    <svg id="processButtonIcon" class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                    </svg>
                    <svg id="loadingSpinner" class="animate-spin h-6 w-6 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </button>
            </div>

            <!-- Output Column -->
            <div class="w-full md:flex-1">
                <label for="outputDates" class="block text-gray-700 text-sm font-semibold mb-2">ผลลัพธ์</label>
                   <textarea
                    id="outputDates"
                    rows="10"
                    readonly
                    class="w-full p-4 border border-gray-300 rounded-xl bg-gray-50 focus:outline-none text-gray-800 transition"
                ></textarea>
            </div>
        </div>

        <!-- Action Buttons Row -->
        <div class="flex flex-col md:flex-row items-center gap-4">
            <div class="w-full md:flex-1">
                   <button id="clearButton" class="w-full bg-gray-200 hover:bg-red-200 text-red-700 font-bold py-3 px-4 rounded-xl transition duration-300 ease-in-out flex items-center justify-center gap-2">
                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                    <span>ล้างข้อมูล</span>
                </button>
            </div>
            <div class="w-full md:w-auto hidden md:block">
                <div class="w-full md:w-auto px-5"></div> <!-- Spacer to align with process button -->
            </div>
            <div class="w-full md:flex-1">
                <button id="copyButton" class="w-full bg-gray-200 hover:bg-green-200 text-green-700 font-bold py-3 px-4 rounded-xl transition duration-300 ease-in-out flex items-center justify-center gap-2">
                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                    <span>คัดลอกผลลัพธ์</span>
                </button>
            </div>
        </div>
        
        <!-- Report Error Section (Changed to red theme) -->
        <div class="mt-8 p-5 bg-red-50/70 rounded-xl border border-red-200/80">
            <h2 class="text-lg font-bold text-center text-red-800 mb-3">พบปัญหาการแปลง?</h2>
            <p class="text-center text-sm text-red-700 mb-4">หากมีรูปแบบวันที่ที่แปลงไม่ได้ กรุณาส่งให้เราตรวจสอบเพื่อการปรับปรุง</p>
            <div class="flex items-center space-x-2">
                <input
                    id="reportErrorInput"
                    type="text"
                    placeholder="วางรูปแบบวันที่ที่มีปัญหาที่นี่"
                    class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 text-gray-800 bg-white"
                />
                <button
                    id="submitErrorButton"
                    class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-lg shadow-md transition transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-red-400 flex-shrink-0"
                >
                    ส่ง
                </button>
            </div>
        </div>

        <!-- Message Box for notifications -->
        <div id="messageBox" class="fixed top-5 right-5 p-4 rounded-lg text-white shadow-lg"></div>

    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Element mapping
            const elements = {
                inputDates: document.getElementById('inputDates'),
                outputDates: document.getElementById('outputDates'),
                processButton: document.getElementById('processButton'),
                processButtonText: document.getElementById('processButtonText'),
                processButtonIcon: document.getElementById('processButtonIcon'),
                loadingSpinner: document.getElementById('loadingSpinner'),
                copyButton: document.getElementById('copyButton'),
                clearButton: document.getElementById('clearButton'),
                messageBox: document.getElementById('messageBox'),
                outputFormatSelect: document.getElementById('outputFormatSelect'),
                reportErrorInput: document.getElementById('reportErrorInput'),
                submitErrorButton: document.getElementById('submitErrorButton')
            };

            // Configuration
            const GOOGLE_APPS_SCRIPT_WEB_APP_URL = 'https://script.google.com/macros/s/AKfycbzl_bSV_fqz31GScuJWvRfVlHJZalf_aaiaIWl4K0pvNL2N0CyqzquAGXMDEwbMFL1Zww/exec';
            const originalSubmitButtonText = elements.submitErrorButton.textContent;
            const monthNames = {
                'january': 1, 'february': 2, 'march': 3, 'april': 4, 'may': 5, 'june': 6, 'july': 7, 'august': 8, 'september': 9, 'october': 10, 'november': 11, 'december': 12,
                'jan': 1, 'feb': 2, 'mar': 3, 'apr': 4, 'jun': 6, 'jul': 7, 'aug': 8, 'sep': 9, 'oct': 10, 'nov': 11, 'dec': 12,
                'มกราคม': 1, 'มกรา': 1, 'ม.ค.': 1, 'มค': 1, 'กุมภาพันธ์': 2, 'กุมภา': 2, 'ก.พ.': 2, 'กพ': 2,
                'มีนาคม': 3, 'มีนา': 3, 'มี.ค.': 3, 'มีค': 3, 'เมษายน': 4, 'เมษา': 4, 'เม.ย.': 4, 'เมย': 4,
                'พฤษภาคม': 5, 'พฤษภา': 5, 'พ.ค.': 5, 'พค': 5, 'มิถุนายน': 6, 'มิถุนา': 6, 'มิ.ย.': 6, 'มิย': 6,
                'กรกฎาคม': 7, 'กรกฎา': 7, 'ก.ค.': 7, 'กค': 7, 'สิงหาคม': 8, 'สิงหา': 8, 'ส.ค.': 8, 'สค': 8,
                'กันยายน': 9, 'กันยา': 9, 'ก.ย.': 9, 'กย': 9, 'ตุลาคม': 10, 'ตุลา': 10, 'ต.ค.': 10, 'ตค': 10,
                'พฤศจิกายน': 11, 'พฤศจิกา': 11, 'พ.ย.': 11, 'พย': 11, 'ธันวาคม': 12, 'ธันวา': 12, 'ธ.ค.': 12, 'ธค': 12
            };

            function showMessage(message, type = 'info') {
                const box = elements.messageBox;
                box.textContent = message;
                // Remove all type classes first
                box.classList.remove('bg-green-500', 'bg-red-500', 'bg-blue-500');
                
                // Add the correct type class
                if (type === 'success') box.classList.add('bg-green-500');
                else if (type === 'error') box.classList.add('bg-red-500');
                else box.classList.add('bg-blue-500');
                
                // Reset to ensure transition plays from off-screen
                box.classList.remove('show');
                box.classList.add('translate-x-full'); // Ensure it's off-screen
                
                // Force reflow to ensure the transition starts correctly from the `translate-x-full` state
                void box.offsetWidth; 
                
                // Show the message (slide in and set opacity to 1)
                box.classList.remove('translate-x-full'); // Slide in
                box.classList.add('show'); // Set opacity to 1
                
                // Hide the message after 3 seconds (fade out)
                setTimeout(() => {
                    box.classList.remove('show'); // Start fade out (opacity 0)
                }, 3000); // Display duration
            }

            // Moved setProcessingState to the top of the scope
            function setProcessingState(isProcessing) {
                if (isProcessing) {
                    elements.processButton.disabled = true;
                    elements.processButtonText.classList.add('hidden');
                    elements.processButtonIcon.classList.add('hidden');
                    elements.loadingSpinner.classList.remove('hidden');
                    elements.processButton.classList.add('cursor-wait', 'opacity-75');
                } else {
                    elements.processButton.disabled = false;
                    elements.processButtonText.classList.remove('hidden');
                    elements.processButtonIcon.classList.remove('hidden');
                    elements.loadingSpinner.classList.add('hidden');
                    elements.processButton.classList.remove('cursor-wait', 'opacity-75');
                }
            }

            function convertThaiNumerals(text) {
                const thaiNumerals = /[๐-๙]/g;
                return text.replace(thaiNumerals, d => '๐๑๒๓๔๕๖๗๘๙'.indexOf(d));
            }

            // Moved formatDateOutput to ensure it's defined before parseDate calls it
            function formatDateOutput(day, month, yearCE, format) {
                const d = String(day).padStart(2, '0');
                const m = String(month).padStart(2, '0');
                switch (format) {
                    case 'dd/mm/yyyy_be': return `${d}/${m}/${yearCE + 543}`;
                    case 'yy.mm.dd_be': return `${String((yearCE + 543) % 100).padStart(2, '0')}.${m}.${d}`;
                    case 'dd/mm/yyyy_ce':
                    default: return `${d}/${m}/${yearCE}`;
                }
            }

            function parseDate(dateStr) {
                dateStr = convertThaiNumerals(dateStr.trim());
                let day, month, yearPart, match;
                let yearCE;

                const currentCEYear = new Date().getFullYear();
                const currentBEYear = currentCEYear + 543;

                // Patterns ordered by preference: YYYY first, then DD/MM/YYYY, then DD Month YYYY, then 2-digit years
                const patterns = [
                    // YYYY-MM-DD or YYYY.MM.DD (e.g., 2024-01-01, 2567.01.02)
                    { regex: /^(\d{4})[./-](\d{1,2})[./-](\d{1,2})$/, type: 'YYYY-MM-DD' },
                    // DD/MM/YYYY or DD.MM.YYYY (e.g., 01/01/2024, 23.09.2558)
                    { regex: /^(\d{1,2})[./-\s]+(\d{1,2})[./-\s]+(\d{4})$/, type: 'DD-MM-YYYY' },
                    // DD Month YYYY (e.g., 23 ก.ย. 2566, 2 January 2024)
                    { regex: /^(\d{1,2})\s*([a-zA-Zก-ฮะ-์.]+?)\s*(\d{4})$/i, type: 'DD Month YYYY' },
                    
                    // DD.MM.YY (e.g., 23.09.66) - 2-digit year
                    { regex: /^(\d{1,2})\.(\d{1,2})\.(\d{2})$/, type: 'DD.MM.YY' },
                    // DD/MM/YY (e.g., 01/01/24) - 2-digit year
                    { regex: /^(\d{1,2})[./-\s]+(\d{1,2})[./-\s]+(\d{2})$/, type: 'DD-MM-YY' },
                    // DD Month YY (e.g., 23 ก.ย. 66)
                    { regex: /^(\d{1,2})\s*([a-zA-Zก-ฮะ-์.]+?)\s*(\d{2})$/i, type: 'DD Month YY' },

                    // Concatenated formats (less reliable, should be last)
                    { regex: /^(\d{1,2})(\d{2})(\d{4})$/, type: 'DDMMYYYY' }, // DDMMYYYY
                    { regex: /^(\d{4})(\d{2})(\d{2})$/, type: 'YYYYMMDD' } // YYYYMMDD
                ];
                
                for (const pattern of patterns) {
                    match = dateStr.match(pattern.regex);
                    if (match) {
                        if (pattern.type === 'YYYY-MM-DD' || pattern.type === 'YYYYMMDD') {
                            yearPart = parseInt(match[1], 10);
                            month = parseInt(match[2], 10);
                            day = parseInt(match[3], 10);
                        } else if (pattern.type.includes('Month')) {
                            day = parseInt(match[1], 10);
                            month = monthNames[match[2].toLowerCase().replace(/\./g, '')];
                            yearPart = parseInt(match[3], 10);
                        } else { // DD-MM-YYYY, DD.MM.YY, DD-MM-YY, DDMMYYYY
                            day = parseInt(match[1], 10);
                            month = parseInt(match[2], 10);
                            yearPart = parseInt(match[3], 10);
                        }

                        // Year determination logic
                        if (String(yearPart).length === 4) { // 4-digit year
                            if (yearPart >= 1900 && yearPart <= currentCEYear + 5) { // Likely CE year (e.g., 1999, 2024)
                                yearCE = yearPart;
                            } else if (yearPart >= 2400 && yearPart <= currentBEYear + 5) { // Likely BE year (e.g., 2567)
                                yearCE = yearPart - 543;
                            } else {
                                // Ambiguous 4-digit year, assume CE as fallback
                                yearCE = yearPart;
                            }
                        } else { // 2-digit year (always assume BE 25xx for Thai context)
                            // If the 2-digit year is less than or equal to current BE year's last two digits + 5,
                            // assume it's current century BE. Otherwise, assume previous century BE.
                            // This logic ensures '33' is 2533 BE.
                            if (yearPart <= (currentBEYear % 100) + 5) {
                                yearCE = (2500 + yearPart) - 543;
                            } else {
                                yearCE = (2400 + yearPart) - 543; // e.g., 99 -> 2499 BE
                            }
                        }
                        break;
                    }
                }

                if (!match || isNaN(day) || isNaN(month) || isNaN(yearCE) || day < 1 || day > 31 || month < 1 || month > 12 || yearCE < 1000) {
                    return null;
                }
                
                // Final validation using Date object
                const dateObj = new Date(yearCE, month - 1, day);
                if (dateObj.getFullYear() !== yearCE || dateObj.getMonth() !== month - 1 || dateObj.getDate() !== day) {
                    return null; // Invalid date (e.g., 31/02/2024)
                }

                return { day, month, yearCE };
            }
            
            // Robust copy to clipboard function
            function copyToClipboard(text) {
                if (!text) {
                    showMessage('ไม่มีผลลัพธ์ให้คัดลอก', 'info');
                    return;
                }
                const textArea = document.createElement("textarea");
                textArea.value = text;
                // Make the textarea invisible and off-screen
                textArea.style.position = "fixed";
                textArea.style.left = "-9999px";
                textArea.style.top = "-9999px";
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select();
                try {
                    document.execCommand('copy');
                    // No explicit success message for copy, animation on button is enough
                } catch (err) {
                    showMessage('ไม่สามารถคัดลอกได้', 'error');
                    console.error('Fallback copy failed:', err);
                } finally {
                    document.body.removeChild(textArea);
                }
            }

            elements.processButton.addEventListener('click', () => {
                elements.processButton.classList.add('animate-on-click');
                setTimeout(() => elements.processButton.classList.remove('animate-on-click'), 200);
                setProcessingState(true);
                setTimeout(() => {
                    const datesInput = elements.inputDates.value.trim();
                    if (!datesInput) {
                        setProcessingState(false);
                        showMessage('กรุณาใส่ข้อมูลวันที่', 'info');
                        return;
                    }
                    const selectedFormat = elements.outputFormatSelect.value;
                    const dateLines = datesInput.split('\n');
                    let processedDates = [];
                    let errorCount = 0;
                    dateLines.forEach(line => {
                        const trimmedLine = line.trim();
                        if (trimmedLine) {
                            const parsed = parseDate(trimmedLine);
                            if (parsed) {
                                processedDates.push(formatDateOutput(parsed.day, parsed.month, parsed.yearCE, selectedFormat));
                            } else {
                                processedDates.push(`ข้อผิดพลาด: "${trimmedLine}"`);
                                errorCount++;
                            }
                        } else {
                            processedDates.push(''); // Keep empty lines
                        }
                    });
                    elements.outputDates.value = processedDates.join('\n');
                    setProcessingState(false);
                    if (errorCount > 0) {
                        showMessage(`${errorCount} รายการไม่สามารถประมวลผลได้`, 'error');
                    }
                    // No explicit success message for process, output field update is enough
                }, 50); // Small delay for animation
            });

            // Add animation to the copy button
            elements.copyButton.addEventListener('click', () => {
                elements.copyButton.classList.add('animate-on-click');
                setTimeout(() => elements.copyButton.classList.remove('animate-on-click'), 200);
                copyToClipboard(elements.outputDates.value);
            });

            elements.clearButton.addEventListener('click', () => {
                elements.inputDates.value = '';
                elements.outputDates.value = '';
                elements.reportErrorInput.value = '';
                showMessage('ล้างข้อมูลทั้งหมดแล้ว', 'info');
            });

            elements.submitErrorButton.addEventListener('click', async () => {
                const unconvertibleFormat = elements.reportErrorInput.value.trim();
                if (!unconvertibleFormat) {
                    showMessage('กรุณาใส่รูปแบบวันที่ที่ต้องการรายงาน', 'info');
                    return;
                }
                elements.submitErrorButton.textContent = 'กำลังส่ง...';
                elements.submitErrorButton.disabled = true;
                const payload = {
                    requestDate: new Date().toLocaleDateString('th-TH'),
                    unconvertibleFormat: unconvertibleFormat
                };
                try {
                    // Using fetch with no-cors for Google Apps Script Web App
                    // Note: 'no-cors' means you won't be able to read the response from the script,
                    // but the request will still be sent.
                    await fetch(GOOGLE_APPS_SCRIPT_WEB_APP_URL, {
                        method: 'POST',
                        mode: 'no-cors', // Important for cross-origin requests to Apps Script
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload),
                    });
                    showMessage('ขอบคุณสำหรับข้อมูล!', 'success');
                    elements.reportErrorInput.value = '';
                } catch (error) {
                    showMessage('ส่งข้อมูลไม่สำเร็จ', 'error');
                    console.error('Error submitting feedback:', error);
                } finally {
                    elements.submitErrorButton.textContent = originalSubmitButtonText;
                    elements.submitErrorButton.disabled = false;
                }
            });
        });
    </script>
</body>
</html>
